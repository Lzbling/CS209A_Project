import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

public class DataProcess {
    private ArrayList<DataInfo> data = new ArrayList<>();
    private static final String missing = "missing";

    public ArrayList<DataInfo> getData(){
        return data;
    }

    public void readData(String path, String sep) {
        try{
            FileInputStream fis = new FileInputStream(path);
            CSVReader csvReader = new CSVReader(fis,sep.charAt(0));
            csvReader.readNext(); // header
            List<String[]> list = csvReader.readAll();
            for ( String[] row : list ){
                DataInfo appointment = new DataInfo(row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7],
                        row[8], row[9], row[10], row[11], row[12], row[13], row[14], row[15], row[16], row[17], row[18],
                        row[19], row[20], row[21], row[22], row[23], row[24], row[25], row[26], row[27], row[28],
                        row[29], row[30], row[31], row[32], row[33], row[34], row[35], row[36], row[37], row[38],
                        row[39], row[40], row[41], row[42], row[43], row[44], row[45], row[46], row[47], row[48],
                        row[49], row[50], row[51], row[52], row[53], row[54], row[55], row[56], row[57], row[58],
                        row[59], row[60], row[61], row[62], row[63], row[64]);
                data.add(appointment);
            }
        }catch (IOException e){
            e.printStackTrace();
        }
    }

    public void dropNaN() {
        //TODO: your implementation here
        ArrayList<DataInfo> tempList = new ArrayList<>();
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getIso_code().equals("") || data.get(i).getDate().equals("")) {
                tempList.add(data.get(i));
            }
        }
        data.removeAll(tempList);
    }

    public void fillContinent() {
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getContinent().equals("")){
                data.get(i).setContinent(missing);
            }
        }

    }
    public void fillNew_cases(){
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getNew_cases().equals("")){
                data.get(i).setNew_cases("0");
            }
        }
    }

    public void fillTotal_cases(){
        data.get(0).setTotal_cases(data.get(0).getNew_cases());
        for (int i = 1; i < data.size(); i++) {
            if (data.get(i).getTotal_cases().equals("")){
                if (data.get(i).getIso_code().equals(data.get(i - 1).getIso_code())){
                    data.get(i).setTotal_cases(String.valueOf(Integer.parseInt(data.get(i).getNew_cases())
                            +Integer.parseInt(data.get(i-1).getTotal_cases())));
                }
                else {
                    data.get(i).setTotal_cases(data.get(i).getNew_cases());
                }
            }
        }
    }

    public void fillNew_cases_smoothed(){
        data.get(0).setNew_cases_smoothed(String.valueOf(Double.parseDouble(data.get(0).getTotal_cases())/7.0));
        data.get(1).setNew_cases_smoothed(String.valueOf(Double.parseDouble(data.get(1).getTotal_cases())/7.0));
        data.get(2).setNew_cases_smoothed(String.valueOf(Double.parseDouble(data.get(2).getTotal_cases())/7.0));
        data.get(3).setNew_cases_smoothed(String.valueOf(Double.parseDouble(data.get(3).getTotal_cases())/7.0));
        data.get(4).setNew_cases_smoothed(String.valueOf(Double.parseDouble(data.get(4).getTotal_cases())/7.0));
        data.get(5).setNew_cases_smoothed(String.valueOf(Double.parseDouble(data.get(5).getTotal_cases())/7.0));

        for (int i = 6; i < data.size(); i++) {
            if (data.get(i).getNew_cases_smoothed().equals("")){
                if (!data.get(i).getIso_code().equals(data.get(i - 1).getIso_code())){//第一天
                    data.get(i).setNew_cases_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_cases())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 2).getIso_code())){
                    data.get(i).setNew_cases_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_cases())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 3).getIso_code())){
                    data.get(i).setNew_cases_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_cases())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 4).getIso_code())){
                    data.get(i).setNew_cases_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_cases())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 5).getIso_code())){
                    data.get(i).setNew_cases_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_cases())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 6).getIso_code())){
                    data.get(i).setNew_cases_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_cases())/7.0));
                }
                else {
                    data.get(i).setNew_cases_smoothed(String.valueOf((Double.parseDouble(data.get(i).getNew_cases())
                            +Double.parseDouble(data.get(i-1).getNew_cases())+Double.parseDouble(data.get(i-2).getNew_cases())
                            +Double.parseDouble(data.get(i-3).getNew_cases())+Double.parseDouble(data.get(i-4).getNew_cases())
                            +Double.parseDouble(data.get(i-5).getNew_cases())+Double.parseDouble(data.get(i-6).getNew_cases()))/7.0));
                }
            }
        }
    }

    public void fillNew_deaths(){
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getNew_deaths().equals("")){
                data.get(i).setNew_deaths("0");
            }
        }
    }
    public void fillTotal_deaths(){
        data.get(0).setTotal_deaths(data.get(0).getNew_deaths());
        for (int i = 1; i < data.size(); i++) {
            if (data.get(i).getTotal_deaths().equals("")){
                if (data.get(i).getIso_code().equals(data.get(i - 1).getIso_code())){
                    data.get(i).setTotal_deaths(String.valueOf(Integer.parseInt(data.get(i).getNew_deaths())
                            +Integer.parseInt(data.get(i-1).getTotal_deaths())));
                }
                else {
                    data.get(i).setTotal_deaths(data.get(i).getNew_deaths());
                }
            }
        }
    }

    public void fillNew_deaths_smoothed(){
        data.get(0).setNew_deaths_smoothed(String.valueOf(Double.parseDouble(data.get(0).getTotal_deaths())/7.0));
        data.get(1).setNew_deaths_smoothed(String.valueOf(Double.parseDouble(data.get(1).getTotal_deaths())/7.0));
        data.get(2).setNew_deaths_smoothed(String.valueOf(Double.parseDouble(data.get(2).getTotal_deaths())/7.0));
        data.get(3).setNew_deaths_smoothed(String.valueOf(Double.parseDouble(data.get(3).getTotal_deaths())/7.0));
        data.get(4).setNew_deaths_smoothed(String.valueOf(Double.parseDouble(data.get(4).getTotal_deaths())/7.0));
        data.get(5).setNew_deaths_smoothed(String.valueOf(Double.parseDouble(data.get(5).getTotal_deaths())/7.0));

        for (int i = 6; i < data.size(); i++) {
            if (data.get(i).getNew_deaths_smoothed().equals("")){
                if (!data.get(i).getIso_code().equals(data.get(i - 1).getIso_code())){//第一天
                    data.get(i).setNew_deaths_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_deaths())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 2).getIso_code())){
                    data.get(i).setNew_deaths_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_deaths())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 3).getIso_code())){
                    data.get(i).setNew_deaths_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_deaths())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 4).getIso_code())){
                    data.get(i).setNew_deaths_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_deaths())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 5).getIso_code())){
                    data.get(i).setNew_deaths_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_deaths())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 6).getIso_code())){
                    data.get(i).setNew_deaths_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_deaths())/7.0));
                }
                else {
                    data.get(i).setNew_deaths_smoothed(String.valueOf((Double.parseDouble(data.get(i).getNew_deaths())
                            +Double.parseDouble(data.get(i-1).getNew_deaths())+Double.parseDouble(data.get(i-2).getNew_deaths())
                            +Double.parseDouble(data.get(i-3).getNew_deaths())+Double.parseDouble(data.get(i-4).getNew_deaths())
                            +Double.parseDouble(data.get(i-5).getNew_deaths())+Double.parseDouble(data.get(i-6).getNew_deaths()))/7.0));
                }
            }
        }
    }
    public void fillPopulation(){
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getPopulation().equals("")) {
                data.get(i).setPopulation(missing);
            }
        }
    }

    public void fillPopulationRelated(){
        //median_age，aged_65_older，aged_70_older，gdp_per_capita，extreme_poverty
        //cardiovasc_death_rate，diabetes_prevalence，female_smokers，male_smokers，handwashing_facilities
        //hospital_beds_per_thousand，life_expectancy，human_development_index
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getPopulation_density().equals("")){
                data.get(i).setPopulation_density(missing);
            }
        }
        for (int i = 0; i < data.size(); i++) {
            for (int j = i+1; j < data.size(); j++) {
                if (data.get(i).getMedian_age().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(j).getIso_code()) ){
                        if (!data.get(j).getMedian_age().equals("")){
                            data.get(i).setMedian_age(data.get(j).getMedian_age());
                        }
                        else {
                            data.get(i).setMedian_age(missing);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < data.size(); i++) {
            for (int j = i+1; j < data.size(); j++) {
                if (data.get(i).getAged_65_older().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(j).getIso_code()) ){
                        if (!data.get(j).getAged_65_older().equals("")){
                            data.get(i).setAged_65_older(data.get(j).getAged_65_older());
                        }
                        else {
                            data.get(i).setAged_65_older(missing);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < data.size(); i++) {
            for (int j = i+1; j < data.size(); j++) {
                if (data.get(i).getAged_70_older().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(j).getIso_code()) ){
                        if (!data.get(j).getAged_70_older().equals("")){
                            data.get(i).setAged_70_older(data.get(j).getAged_70_older());
                        }
                        else {
                            data.get(i).setAged_70_older(missing);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < data.size(); i++) {
            for (int j = i+1; j < data.size(); j++) {
                if (data.get(i).getGdp_per_capita().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(j).getIso_code()) ){
                        if (!data.get(j).getGdp_per_capita().equals("")){
                            data.get(i).setGdp_per_capita(data.get(j).getGdp_per_capita());
                        }
                        else {
                            data.get(i).setGdp_per_capita(missing);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < data.size(); i++) {
            for (int j = i+1; j < data.size(); j++) {
                if (data.get(i).getExtreme_poverty().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(j).getIso_code()) ){
                        if (!data.get(j).getExtreme_poverty().equals("")){
                            data.get(i).setExtreme_poverty(data.get(j).getExtreme_poverty());
                        }
                        else {
                            data.get(i).setExtreme_poverty(missing);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < data.size(); i++) {
            for (int j = i+1; j < data.size(); j++) {
                if (data.get(i).getCardiovasc_death_rate().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(j).getIso_code()) ){
                        if (!data.get(j).getCardiovasc_death_rate().equals("")){
                            data.get(i).setCardiovasc_death_rate(data.get(j).getCardiovasc_death_rate());
                        }
                        else {
                            data.get(i).setCardiovasc_death_rate(missing);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < data.size(); i++) {
            for (int j = i+1; j < data.size(); j++) {
                if (data.get(i).getDiabetes_prevalence().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(j).getIso_code()) ){
                        if (!data.get(j).getDiabetes_prevalence().equals("")){
                            data.get(i).setDiabetes_prevalence(data.get(j).getDiabetes_prevalence());
                        }
                        else {
                            data.get(i).setDiabetes_prevalence(missing);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < data.size(); i++) {
            for (int j = i+1; j < data.size(); j++) {
                if (data.get(i).getFemale_smokers().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(j).getIso_code()) ){
                        if (!data.get(j).getFemale_smokers().equals("")){
                            data.get(i).setFemale_smokers(data.get(j).getFemale_smokers());
                        }
                        else {
                            data.get(i).setFemale_smokers(missing);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < data.size(); i++) {
            for (int j = i+1; j < data.size(); j++) {
                if (data.get(i).getMale_smokers().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(j).getIso_code()) ){
                        if (!data.get(j).getMale_smokers().equals("")){
                            data.get(i).setMale_smokers(data.get(j).getMale_smokers());
                        }
                        else {
                            data.get(i).setMale_smokers(missing);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < data.size(); i++) {
            for (int j = i+1; j < data.size(); j++) {
                if (data.get(i).getHandwashing_facilities().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(j).getIso_code()) ){
                        if (!data.get(j).getHandwashing_facilities().equals("")){
                            data.get(i).setHandwashing_facilities(data.get(j).getHandwashing_facilities());
                        }
                        else {
                            data.get(i).setHandwashing_facilities(missing);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < data.size(); i++) {
            for (int j = i+1; j < data.size(); j++) {
                if (data.get(i).getHospital_beds_per_thousand().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(j).getIso_code()) ){
                        if (!data.get(j).getHospital_beds_per_thousand().equals("")){
                            data.get(i).setHospital_beds_per_thousand(data.get(j).getHospital_beds_per_thousand());
                        }
                        else {
                            data.get(i).setHospital_beds_per_thousand(missing);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < data.size(); i++) {
            for (int j = i+1; j < data.size(); j++) {
                if (data.get(i).getLife_expectancy().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(j).getIso_code()) ){
                        if (!data.get(j).getLife_expectancy().equals("")){
                            data.get(i).setLife_expectancy(data.get(j).getLife_expectancy());
                        }
                        else {
                            data.get(i).setLife_expectancy(missing);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < data.size(); i++) {
            for (int j = i+1; j < data.size(); j++) {
                if (data.get(i).getHuman_development_index().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(j).getIso_code()) ){
                        if (!data.get(j).getHuman_development_index().equals("")){
                            data.get(i).setHuman_development_index(data.get(j).getHuman_development_index());
                        }
                        else {
                            data.get(i).setHuman_development_index(missing);
                        }
                    }
                }
            }
        }
    }

    public void fill_reproduction_rate(){
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getReproduction_rate().equals("")){
                data.get(i).setReproduction_rate(missing);
            }
        }
    }

    public void fill_patients(){
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getIcu_patients().equals("")){
                data.get(i).setIcu_patients("0");
            }
            if (data.get(i).getHosp_patients().equals("")){
                data.get(i).setHosp_patients("0");
            }
        }
    }


    public void fillWeekly_icu_admissions() throws ParseException {
        //判断星期天是否为空，不为空将前六天补齐；为空都标记为0
        for (int i = 6; i < data.size(); i++) {
            if (dayToWeek(data.get(i).getDate()).equals("Sunday")){
                if (!data.get(i).getWeekly_icu_admissions().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(i-1).getIso_code())){
                        data.get(i-1).setWeekly_icu_admissions(data.get(i).getWeekly_icu_admissions());
                    }
                    if (data.get(i).getIso_code().equals(data.get(i-2).getIso_code())){
                        data.get(i-2).setWeekly_icu_admissions(data.get(i).getWeekly_icu_admissions());
                    }
                    if (data.get(i).getIso_code().equals(data.get(i-3).getIso_code())){
                        data.get(i-3).setWeekly_icu_admissions(data.get(i).getWeekly_icu_admissions());
                    }
                    if (data.get(i).getIso_code().equals(data.get(i-4).getIso_code())){
                        data.get(i-4).setWeekly_icu_admissions(data.get(i).getWeekly_icu_admissions());
                    }
                    if (data.get(i).getIso_code().equals(data.get(i-5).getIso_code())){
                        data.get(i-5).setWeekly_icu_admissions(data.get(i).getWeekly_icu_admissions());
                    }
                    if (data.get(i).getIso_code().equals(data.get(i-6).getIso_code())){
                        data.get(i-6).setWeekly_icu_admissions(data.get(i).getWeekly_icu_admissions());
                    }
                }
            }
        }

        for (int i = 0; i <data.size() ; i++) {
            if (data.get(i).getWeekly_icu_admissions().equals("")){
                data.get(i).setWeekly_icu_admissions("0");
            }
        }
    }
    public void fillWeekly_hosp_admissions() throws ParseException {
        //判断星期天是否为空，不为空将前六天补齐；为空都标记为0
        for (int i = 6; i < data.size(); i++) {
            if (dayToWeek(data.get(i).getDate()).equals("Sunday")){
                if (!data.get(i).getWeekly_hosp_admissions().equals("")){
                    if (data.get(i).getIso_code().equals(data.get(i-1).getIso_code())){
                        data.get(i-1).setWeekly_hosp_admissions(data.get(i).getWeekly_hosp_admissions());
                    }
                    if (data.get(i).getIso_code().equals(data.get(i-2).getIso_code())){
                        data.get(i-2).setWeekly_hosp_admissions(data.get(i).getWeekly_hosp_admissions());
                    }
                    if (data.get(i).getIso_code().equals(data.get(i-3).getIso_code())){
                        data.get(i-3).setWeekly_hosp_admissions(data.get(i).getWeekly_hosp_admissions());
                    }
                    if (data.get(i).getIso_code().equals(data.get(i-4).getIso_code())){
                        data.get(i-4).setWeekly_hosp_admissions(data.get(i).getWeekly_hosp_admissions());
                    }
                    if (data.get(i).getIso_code().equals(data.get(i-5).getIso_code())){
                        data.get(i-5).setWeekly_hosp_admissions(data.get(i).getWeekly_hosp_admissions());
                    }
                    if (data.get(i).getIso_code().equals(data.get(i-6).getIso_code())){
                        data.get(i-6).setWeekly_hosp_admissions(data.get(i).getWeekly_hosp_admissions());
                    }
                }
            }
        }

        for (int i = 0; i <data.size() ; i++) {
            if (data.get(i).getWeekly_hosp_admissions().equals("")){
                data.get(i).setWeekly_hosp_admissions("0");
            }
        }
    }
    private static final String dateFormat = "yyyy-MM-dd";

    public static String dayToWeek(String date) throws ParseException {
        String newDate = date.replace("/","-");
        DateFormat sdf = new SimpleDateFormat(dateFormat);
        String[] weekdays = {"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
        Calendar cal = Calendar.getInstance();
        Date targetDate = sdf.parse(newDate);
        cal.setTime(targetDate);
        int pointer = cal.get(Calendar.DAY_OF_WEEK) - 1;
        if (pointer < 0){
            pointer = 0;
        }
        return weekdays[pointer];
    }

    public void fillNew_tests(){
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getNew_tests().equals("")){
                data.get(i).setNew_tests("0");
            }
        }
    }

    public void fillTotal_tests(){
        data.get(0).setTotal_tests(data.get(0).getNew_tests());
        for (int i = 1; i < data.size(); i++) {
            if (data.get(i).getTotal_tests().equals("")){
                if (data.get(i).getIso_code().equals(data.get(i - 1).getIso_code())){
                    data.get(i).setTotal_tests(String.valueOf(Integer.parseInt(data.get(i).getNew_tests())
                            +Integer.parseInt(data.get(i-1).getTotal_tests())));
                }
                else {
                    data.get(i).setTotal_tests(data.get(i).getNew_tests());
                }
            }
        }
    }

    public void fillNew_tests_smoothed(){
        data.get(0).setNew_tests_smoothed(String.valueOf(Double.parseDouble(data.get(0).getTotal_tests())/7.0));
        data.get(1).setNew_tests_smoothed(String.valueOf(Double.parseDouble(data.get(1).getTotal_tests())/7.0));
        data.get(2).setNew_tests_smoothed(String.valueOf(Double.parseDouble(data.get(2).getTotal_tests())/7.0));
        data.get(3).setNew_tests_smoothed(String.valueOf(Double.parseDouble(data.get(3).getTotal_tests())/7.0));
        data.get(4).setNew_tests_smoothed(String.valueOf(Double.parseDouble(data.get(4).getTotal_tests())/7.0));
        data.get(5).setNew_tests_smoothed(String.valueOf(Double.parseDouble(data.get(5).getTotal_tests())/7.0));
        data.get(6).setNew_tests_smoothed(String.valueOf(Double.parseDouble(data.get(6).getTotal_tests())/7.0));

        for (int i = 6; i < data.size(); i++) {
            if (data.get(i).getNew_tests_smoothed().equals("")){
                if (!data.get(i).getIso_code().equals(data.get(i - 1).getIso_code())){//第一天
                    data.get(i).setNew_tests_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_tests())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 2).getIso_code())){
                    data.get(i).setNew_tests_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_tests())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 3).getIso_code())){
                    data.get(i).setNew_tests_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_tests())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 4).getIso_code())){
                    data.get(i).setNew_tests_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_tests())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 5).getIso_code())){
                    data.get(i).setNew_tests_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_tests())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 6).getIso_code())){
                    data.get(i).setNew_tests_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_tests())/7.0));
                }
                else {
                    data.get(i).setNew_tests_smoothed(String.valueOf((Double.parseDouble(data.get(i).getNew_tests())
                            +Double.parseDouble(data.get(i-1).getNew_tests())+Double.parseDouble(data.get(i-2).getNew_tests())
                            +Double.parseDouble(data.get(i-3).getNew_tests())+Double.parseDouble(data.get(i-4).getNew_tests())
                            +Double.parseDouble(data.get(i-5).getNew_tests())+Double.parseDouble(data.get(i-6).getNew_tests()))/7.0));
                }
            }
        }
    }

    public void fillPer_million(){
        for (int i = 0; i < data.size(); i++){
            if (data.get(i).getPopulation().equals(missing)){
                data.get(i).setNew_cases_per_million(missing);
                data.get(i).setTotal_cases_per_million(missing);
                data.get(i).setNew_cases_smoothed_per_million(missing);
                data.get(i).setNew_deaths_per_million(missing);
                data.get(i).setTotal_deaths_per_million(missing);
                data.get(i).setNew_deaths_smoothed_per_million(missing);
                data.get(i).setIcu_patients_per_million(missing);
                data.get(i).setHosp_patients_per_million(missing);
                data.get(i).setWeekly_icu_admissions_per_million(missing);
                data.get(i).setWeekly_hosp_admissions_per_million(missing);
            }
            else if (data.get(i).getNew_cases_per_million().equals("")){
                data.get(i).setNew_cases_per_million(String.valueOf(Double.parseDouble(data.get(i).getNew_cases())
                        /Double.parseDouble(data.get(i).getPopulation())*1000000.0));
            }
            else if (data.get(i).getTotal_cases_per_million().equals("")){
                data.get(i).setTotal_cases_per_million(String.valueOf(Double.parseDouble(data.get(i).getTotal_cases())
                        /Double.parseDouble(data.get(i).getPopulation())*1000000.0));
            }
            else if (data.get(i).getNew_cases_smoothed_per_million().equals("")){
                data.get(i).setNew_cases_smoothed_per_million(String.valueOf(Double.parseDouble(data.get(i).getNew_cases_smoothed())
                        /Double.parseDouble(data.get(i).getPopulation())*1000000.0));
            }
            else if (data.get(i).getNew_deaths_per_million().equals("")){
                data.get(i).setNew_deaths_per_million(String.valueOf(Double.parseDouble(data.get(i).getNew_deaths())
                        /Double.parseDouble(data.get(i).getPopulation())*1000000.0));
            }
            else if (data.get(i).getTotal_deaths_per_million().equals("")){
                data.get(i).setTotal_deaths_per_million(String.valueOf(Double.parseDouble(data.get(i).getTotal_deaths())
                        /Double.parseDouble(data.get(i).getPopulation())*1000000.0));
            }
            else if (data.get(i).getNew_deaths_smoothed_per_million().equals("")){
                data.get(i).setNew_deaths_smoothed_per_million(String.valueOf(Double.parseDouble(data.get(i).getNew_deaths_smoothed())
                        /Double.parseDouble(data.get(i).getPopulation())*1000000.0));
            }
            else if (data.get(i).getIcu_patients_per_million().equals("")){
                data.get(i).setIcu_patients_per_million(String.valueOf(Double.parseDouble(data.get(i).getIcu_patients())
                        /Double.parseDouble(data.get(i).getPopulation())*1000000.0));
            }
            else if (data.get(i).getHosp_patients_per_million().equals("")){
                data.get(i).setHosp_patients_per_million(String.valueOf(Double.parseDouble(data.get(i).getHosp_patients())
                        /Double.parseDouble(data.get(i).getPopulation())*1000000.0));
            }
            else if (data.get(i).getWeekly_icu_admissions_per_million().equals("")){
                data.get(i).setWeekly_icu_admissions_per_million(String.valueOf(Double.parseDouble(data.get(i).getWeekly_icu_admissions())
                        /Double.parseDouble(data.get(i).getPopulation())*1000000.0));
            }
            else if (data.get(i).getWeekly_hosp_admissions_per_million().equals("")){
                data.get(i).setWeekly_hosp_admissions_per_million(String.valueOf(Double.parseDouble(data.get(i).getWeekly_hosp_admissions())
                        /Double.parseDouble(data.get(i).getPopulation())*1000000.0));
            }
        }
    }

    public void fillPer_thousand(){
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getPopulation().equals(missing)) {
                data.get(i).setTotal_tests_per_thousand(missing);
                data.get(i).setNew_tests_per_thousand(missing);
                data.get(i).setNew_tests_smoothed_per_thousand(missing);
            } else if (data.get(i).getTotal_tests_per_thousand().equals("")) {
                data.get(i).setTotal_tests_per_thousand(String.valueOf(Double.parseDouble(data.get(i).getTotal_tests())
                        / Double.parseDouble(data.get(i).getPopulation()) * 1000.0));
            } else if (data.get(i).getNew_tests_per_thousand().equals("")) {
                data.get(i).setNew_tests_per_thousand(String.valueOf(Double.parseDouble(data.get(i).getNew_tests())
                        / Double.parseDouble(data.get(i).getPopulation()) * 1000.0));
            } else if (data.get(i).getNew_tests_smoothed_per_thousand().equals("")) {
                data.get(i).setNew_tests_smoothed_per_thousand(String.valueOf(Double.parseDouble(data.get(i).getNew_tests_smoothed())
                        / Double.parseDouble(data.get(i).getPopulation()) * 1000.0));
            }
        }
    }

    public void fillPositive_test(){
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getPositive_rate().equals("")){
                if (data.get(i).getNew_tests_smoothed().equals("0.0")){
                    data.get(i).setPositive_rate("0.0");
                }
                else {
                    data.get(i).setPositive_rate(String.valueOf(Double.parseDouble(data.get(i).getNew_cases_smoothed())/
                            Double.parseDouble(data.get(i).getNew_tests_smoothed())));
                }
            }
        }
    }

    public void fillTests_per_case(){
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getTests_per_case().equals("")){
                if (data.get(i).getPositive_rate().equals("0.0")){
                    data.get(i).setTests_per_case(String.valueOf(Float.POSITIVE_INFINITY));
                }
                else {
                    data.get(i).setTests_per_case(String.valueOf(1/Double.parseDouble(data.get(i).getPositive_rate())));
                }
            }
        }
    }
    public void fillTests_units(){
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getTests_units().equals("")){
                for (int j = 0; j < data.size(); j++) {
                    if (data.get(j).getIso_code().equals(data.get(i).getIso_code())) {
                        if (!data.get(j).getTests_units().equals("")){
                            data.get(i).setTests_units(data.get(j).getTests_units());
                        }
                    }
                }
            }
        }
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getTests_units().equals("")){
                data.get(i).setTests_units("units unclear");
            }
        }
    }

    public void fillTotal_vaccinations(){
        if (data.get(0).getTotal_vaccinations().equals("")){
            data.get(0).setTotal_vaccinations("0");
        }
        for (int i = 1; i < data.size(); i++) {
            if (data.get(i).getTotal_vaccinations().equals("")){
                if (data.get(i).getIso_code().equals(data.get(i-1).getIso_code())){
                    data.get(i).setTotal_vaccinations(data.get(i-1).getTotal_vaccinations());
                }
                else {
                    data.get(i).setTotal_vaccinations("0");
                }
            }
        }
    }
    public void fillPeople_vaccinated(){
        if (data.get(0).getPeople_vaccinated().equals("")){
            data.get(0).setPeople_vaccinated("0");
        }
        for (int i = 1; i < data.size(); i++) {
            if (data.get(i).getPeople_vaccinated().equals("")){
                if (data.get(i).getIso_code().equals(data.get(i-1).getIso_code())){
                    data.get(i).setPeople_vaccinated(data.get(i-1).getPeople_vaccinated());
                }
                else {
                    data.get(i).setPeople_vaccinated("0");
                }
            }
        }
    }
    public void fillPeople_fully_vaccinated(){
        if (data.get(0).getPeople_fully_vaccinated().equals("")){
            data.get(0).setPeople_fully_vaccinated("0");
        }
        for (int i = 1; i < data.size(); i++) {
            if (data.get(i).getPeople_fully_vaccinated().equals("")){
                if (data.get(i).getIso_code().equals(data.get(i-1).getIso_code())){
                    data.get(i).setPeople_fully_vaccinated(data.get(i-1).getPeople_fully_vaccinated());
                }
                else {
                    data.get(i).setPeople_fully_vaccinated("0");
                }
            }
        }
    }
    public void fillTotal_booster(){
        if (data.get(0).getTotal_boosters().equals("")){
            data.get(0).setTotal_boosters("0");
        }
        for (int i = 1; i < data.size(); i++) {
            if (data.get(i).getTotal_boosters().equals("")){
                if (data.get(i).getIso_code().equals(data.get(i-1).getIso_code())){
                    data.get(i).setTotal_boosters(data.get(i-1).getTotal_boosters());
                }
                else {
                    data.get(i).setTotal_boosters("0");
                }
            }
        }
    }

    public void fillNew_vaccinations(){
        if (data.get(0).getNew_vaccinations().equals("")){
            data.get(0).setNew_vaccinations("0");
        }
        for (int i = 1; i < data.size(); i++) {
            if (data.get(i).getNew_vaccinations().equals("")){
                if (data.get(i).getIso_code().equals(data.get(i-1).getIso_code())){
                    data.get(i).setNew_vaccinations(String.valueOf(Integer.parseInt(data.get(i).getTotal_vaccinations())
                            - Integer.parseInt(data.get(i-1).getTotal_vaccinations())));
                }
                else {
                    data.get(i).setNew_vaccinations("0");
                }
            }
        }
    }
    public void fillNew_vaccinations_smoothed(){
        data.get(0).setNew_vaccinations_smoothed(String.valueOf(Double.parseDouble(data.get(0).getTotal_vaccinations())/7.0));
        data.get(1).setNew_vaccinations_smoothed(String.valueOf(Double.parseDouble(data.get(1).getTotal_vaccinations())/7.0));
        data.get(2).setNew_vaccinations_smoothed(String.valueOf(Double.parseDouble(data.get(2).getTotal_vaccinations())/7.0));
        data.get(3).setNew_vaccinations_smoothed(String.valueOf(Double.parseDouble(data.get(3).getTotal_vaccinations())/7.0));
        data.get(4).setNew_vaccinations_smoothed(String.valueOf(Double.parseDouble(data.get(4).getTotal_vaccinations())/7.0));
        data.get(5).setNew_vaccinations_smoothed(String.valueOf(Double.parseDouble(data.get(5).getTotal_vaccinations())/7.0));

        for (int i = 6; i < data.size(); i++) {
            if (data.get(i).getNew_vaccinations_smoothed().equals("")){
                if (!data.get(i).getIso_code().equals(data.get(i - 1).getIso_code())){//第一天
                    data.get(i).setNew_vaccinations_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_vaccinations())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 2).getIso_code())){
                    data.get(i).setNew_vaccinations_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_vaccinations())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 3).getIso_code())){
                    data.get(i).setNew_vaccinations_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_vaccinations())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 4).getIso_code())){
                    data.get(i).setNew_vaccinations_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_vaccinations())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 5).getIso_code())){
                    data.get(i).setNew_vaccinations_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_vaccinations())/7.0));
                }
                if (!data.get(i).getIso_code().equals(data.get(i - 6).getIso_code())){
                    data.get(i).setNew_vaccinations_smoothed(String.valueOf(Double.parseDouble(data.get(i).getTotal_vaccinations())/7.0));
                }
                else {
                    data.get(i).setNew_vaccinations_smoothed(String.valueOf((Double.parseDouble(data.get(i).getNew_vaccinations())
                            +Double.parseDouble(data.get(i-1).getNew_vaccinations())+Double.parseDouble(data.get(i-2).getNew_vaccinations())
                            +Double.parseDouble(data.get(i-3).getNew_vaccinations())+Double.parseDouble(data.get(i-4).getNew_vaccinations())
                            +Double.parseDouble(data.get(i-5).getNew_vaccinations())+Double.parseDouble(data.get(i-6).getNew_vaccinations()))/7.0));
                }
            }
        }
    }

    public void fillPer_hundred() {
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getPopulation().equals(missing)) {
                data.get(i).setTotal_vaccinations_per_hundred(missing);
                data.get(i).setPeople_vaccinated_per_hundred(missing);
                data.get(i).setPeople_fully_vaccinated_per_hundred(missing);
                data.get(i).setTotal_boosters_per_hundred(missing);
                data.get(i).setNew_vaccinations_smoothed_per_million(missing);
            } else if (data.get(i).getTotal_vaccinations_per_hundred().equals("")) {
                data.get(i).setTotal_vaccinations_per_hundred(String.valueOf(Double.parseDouble(data.get(i).getTotal_vaccinations())
                        / Double.parseDouble(data.get(i).getPopulation()) * 100.0));
            } else if (data.get(i).getPeople_vaccinated_per_hundred().equals("")) {
                data.get(i).setPeople_vaccinated_per_hundred(String.valueOf(Double.parseDouble(data.get(i).getPeople_vaccinated())
                        / Double.parseDouble(data.get(i).getPopulation()) * 100.0));
            } else if (data.get(i).getPeople_fully_vaccinated_per_hundred().equals("")) {
                data.get(i).setPeople_fully_vaccinated_per_hundred(String.valueOf(Double.parseDouble(data.get(i).getPeople_fully_vaccinated())
                        / Double.parseDouble(data.get(i).getPopulation()) * 100.0));
            } else if (data.get(i).getTotal_boosters_per_hundred().equals("")) {
                data.get(i).setTotal_boosters_per_hundred(String.valueOf(Double.parseDouble(data.get(i).getTotal_boosters())
                        / Double.parseDouble(data.get(i).getPopulation()) * 100.0));
            } else if (data.get(i).getNew_vaccinations_smoothed_per_million().equals("")) {
                data.get(i).setNew_vaccinations_smoothed_per_million(String.valueOf(Double.parseDouble(data.get(i).getNew_vaccinations_smoothed())
                        / Double.parseDouble(data.get(i).getPopulation()) * 100.0));
            }
        }
    }

    public void fillStringency_index(){
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).getStringency_index().equals("")){
                data.get(i).setStringency_index(missing);
            }
        }
    }

    public void fillExcess_mortality_cumulative_absolute(){
        if (data.get(0).getExcess_mortality_cumulative_absolute().equals("")){
            data.get(0).setExcess_mortality_cumulative_absolute("0");
        }
        for (int i = 1; i < data.size(); i++) {
            if (data.get(i).getExcess_mortality_cumulative_absolute().equals("")){
                if (data.get(i).getIso_code().equals(data.get(i-1).getIso_code())){
                    data.get(i).setExcess_mortality_cumulative_absolute(data.get(i-1).getExcess_mortality_cumulative_absolute());
                }
                else {
                    data.get(i).setExcess_mortality_cumulative_absolute("0");
                }
            }
        }
    }
    public void fillExcess_mortality_cumulative(){
        if (data.get(0).getExcess_mortality_cumulative().equals("")){
            data.get(0).setExcess_mortality_cumulative("0");
        }
        for (int i = 1; i < data.size(); i++) {
            if (data.get(i).getExcess_mortality_cumulative().equals("")){
                if (data.get(i).getIso_code().equals(data.get(i-1).getIso_code())){
                    data.get(i).setExcess_mortality_cumulative(data.get(i-1).getExcess_mortality_cumulative());
                }
                else {
                    data.get(i).setExcess_mortality_cumulative("0");
                }
            }
        }
    }
    public void fillExcess_mortality(){
        if (data.get(0).getExcess_mortality().equals("")){
            data.get(0).setExcess_mortality("0");
        }
        for (int i = 1; i < data.size(); i++) {
            if (data.get(i).getExcess_mortality().equals("")){
                if (data.get(i).getIso_code().equals(data.get(i-1).getIso_code())){
                    data.get(i).setExcess_mortality(data.get(i-1).getExcess_mortality());
                }
                else {
                    data.get(i).setExcess_mortality("0");
                }
            }
        }
    }
    public void fillExcess_mortality_cumulative_Per_million(){
        for (int i = 0; i < data.size(); i++){
            if (data.get(i).getPopulation().equals(missing)){
                data.get(i).setExcess_mortality_cumulative_per_million(missing);
            }
            else if (data.get(i).getExcess_mortality_cumulative_absolute().equals("")){
                data.get(i).setExcess_mortality_cumulative_per_million(String.valueOf(Double.parseDouble(data.get(i).getExcess_mortality_cumulative_absolute())
                        /Double.parseDouble(data.get(i).getPopulation())*1000000.0));
            }
        }
    }
} // end of class

class CSVReader{
    private BufferedReader br;
    private boolean hasNext = true;
    private char separator;
    private char quoteChar;
    private int skipLines;
    private boolean linesSkipped;
    public static final char DEFAULT_SEPARATOR = ',';
    public static final char DEFAULT_QUOTE_CHARACTER = '"';
    public static final int DEFAULT_SKIP_LINES = 0;
    public CSVReader(FileInputStream fis) throws IOException {
        this(fis, DEFAULT_SEPARATOR);
    }
    public CSVReader(FileInputStream fis, char separator) throws IOException {
        this(fis, separator, DEFAULT_QUOTE_CHARACTER);
    }
    public CSVReader(FileInputStream fis, char separator, char quoteChar) throws IOException {
        this(fis, separator, quoteChar, DEFAULT_SKIP_LINES);
    }
    public CSVReader(FileInputStream fis, char separator, char quoteChar, int line) throws IOException {
        this.br = new BufferedReader(new InputStreamReader(fis, StandardCharsets.ISO_8859_1));
        this.separator = separator;
        this.quoteChar = quoteChar;
        this.skipLines = line;
    }
    public List<String[]> readAll() throws IOException {
        List<String[]> allElements = new ArrayList<>();
        while (hasNext) {
            String[] nextLineAsTokens = readNext();
            if (nextLineAsTokens != null)
                allElements.add(nextLineAsTokens);
        }
        return allElements;
    }
    public String[] readNext() throws IOException {

        String nextLine = getNextLine();
        return hasNext ? parseLine(nextLine) : null;
    }
    private String getNextLine() throws IOException {
        if (!this.linesSkipped) {
            for (int i = 0; i < skipLines; i++) {
                br.readLine();
            }
            this.linesSkipped = true;
        }
        String nextLine = br.readLine();
        if (nextLine == null) {
            hasNext = false;
        }
        return hasNext ? nextLine : null;
    }
    private String[] parseLine(String nextLine) throws IOException {
        if (nextLine == null) {
            return null;
        }
        List tokensOnThisLine = new ArrayList();
        StringBuffer sb = new StringBuffer();
        boolean inQuotes = false;
        do {
            if (inQuotes) {
                // continuing a quoted section, reappend newline
                sb.append("\n");
                nextLine = getNextLine();
                if (nextLine == null)
                    break;
            }
            for (int i = 0; i < nextLine.length(); i++) {
                char c = nextLine.charAt(i);
                if (c == quoteChar) {
                    // this gets complex... the quote may end a quoted block, or escape another quote.
                    // do a 1-char lookahead:
                    if( inQuotes  // we are in quotes, therefore there can be escaped quotes in here.
                            && nextLine.length() > (i+1)  // there is indeed another character to check.
                            && nextLine.charAt(i+1) == quoteChar ){ // ..and that char. is a quote also.
                        // we have two quote chars in a row == one quote char, so consume them both and
                        // put one on the token. we do *not* exit the quoted text.
                        sb.append(nextLine.charAt(i+1));
                        i++;
                    }else{
                        inQuotes = !inQuotes;
                        // the tricky case of an embedded quote in the middle: a,bc"d"ef,g
                        if(i>2 //not on the beginning of the line
                                && nextLine.charAt(i-1) != this.separator //not at the beginning of an escape sequence
                                && nextLine.length()>(i+1) &&
                                nextLine.charAt(i+1) != this.separator //not at the	end of an escape sequence
                        ){
                            sb.append(c);
                        }
                    }
                } else if (c == separator && !inQuotes) {
                    tokensOnThisLine.add(sb.toString());
                    sb = new StringBuffer(); // start work on next token
                } else {
                    sb.append(c);
                }
            }
        } while (inQuotes);
        tokensOnThisLine.add(sb.toString());
        return (String[]) tokensOnThisLine.toArray(new String[0]);
    }
    public void close() throws IOException{
        br.close();
    }

}
